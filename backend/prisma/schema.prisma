// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos base para nossa aplicação
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  email           String    @unique
  phone           String
  cpf             String    @unique
  birthDate       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
}

model Location {
  id          String    @id @default(uuid())
  name        String
  description String?   // Campo opcional de descrição
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workingHours Json?    // Armazenará os horários de funcionamento em formato JSON
  professionals Professional[] // Relacionamento com profissionais
}

model Professional {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  email           String    @unique
  phone           String
  locationId      String?   // Chave estrangeira para Location
  location        Location? @relation(fields: [locationId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[] // Relacionamento com serviços
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String?
  duration    Int       // Duração em minutos
  price       Decimal   @db.Decimal(10, 2)
  color      String    // Cor para identificação visual
  categoryId  String    // Chave estrangeira para Category
  category    Category  @relation(fields: [categoryId], references: [id])
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
